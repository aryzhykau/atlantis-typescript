import { baseApi } from './api';
import { debugLog } from '../../features/calendar-v2/utils/debug';
import {
  TrainingTemplate,
  TrainingTemplateCreate,
  TrainingTemplateUpdate,
} from '../../features/calendar-v2/models/trainingTemplate';

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±—É–¥—É—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
import {
  TrainingStudentTemplate,
  TrainingStudentTemplateCreate,
  TrainingStudentTemplateUpdate,
} from '../../features/calendar-v2/models/trainingStudentTemplate';
import {
  RealTraining,
  RealTrainingCreate,
  RealTrainingUpdate,
  GetRealTrainingsParams,
  RealTrainingStudent,
  StudentCancellationRequest,
  StudentCancellationResponse,
  TrainingCancellationRequest,
} from '../../features/calendar-v2/models/realTraining';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Ç–µ–≥–æ–≤ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–º, —á—Ç–æ –≤ baseApi.tagTypes
const TRAINING_TEMPLATE_TAG: 'TrainingTemplateV2' = 'TrainingTemplateV2';
const TRAINING_STUDENT_TEMPLATE_TAG: 'TrainingStudentTemplateV2' = 'TrainingStudentTemplateV2';
const REAL_TRAINING_TAG: 'RealTrainingV2' = 'RealTrainingV2';

export const calendarApiV2 = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // --- Training Templates Endpoints ---
    getTrainingTemplates: builder.query<TrainingTemplate[], { dayNumber?: number } | void>({
      query: (params) => {
        const searchParams = new URLSearchParams();
        if (params?.dayNumber !== undefined) {
          searchParams.append('day_number', params.dayNumber.toString());
        }
        return `training_templates/${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;
      },
      providesTags: (result, __, params) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: TRAINING_TEMPLATE_TAG, id } as const)),
              { type: TRAINING_TEMPLATE_TAG, id: 'LIST' },
              // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
              params?.dayNumber !== undefined 
                ? { type: TRAINING_TEMPLATE_TAG, id: `LIST_DAY_${params.dayNumber}` }
                : { type: TRAINING_TEMPLATE_TAG, id: 'LIST_ALL' },
            ]
          : [{ type: TRAINING_TEMPLATE_TAG, id: 'LIST' }],
    }),
    getTrainingTemplateById: builder.query<TrainingTemplate, number>({
      query: (id) => `training_templates/${id}`,
      providesTags: (_, __, id) => [{ type: TRAINING_TEMPLATE_TAG, id }],
    }),
    createTrainingTemplate: builder.mutation<TrainingTemplate, TrainingTemplateCreate>({
      query: (newTemplate) => ({
        url: 'training_templates/',
        method: 'POST',
        body: newTemplate,
      }),
      invalidatesTags: [{ type: TRAINING_TEMPLATE_TAG, id: 'LIST' }],
    }),
    updateTrainingTemplate: builder.mutation<TrainingTemplate, { id: number; data: TrainingTemplateUpdate }>({
      query: ({ id, data }) => ({
        url: `training_templates/${id}`,
        method: 'PUT',
        body: data,
      }),
      invalidatesTags: (_, __, { id }) => [{ type: TRAINING_TEMPLATE_TAG, id }],
    }),
    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º—É—Ç–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    moveTrainingTemplate: builder.mutation<TrainingTemplate, { 
      id: number; 
      dayNumber: number; 
      startTime: string; 
    }>({
      query: ({ id, dayNumber, startTime }) => ({
        url: `training_templates/${id}`,
        method: 'PUT',
        body: {
          day_number: dayNumber,
          start_time: startTime,
        },
      }),
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–æ–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–µ—à–µ–π
      onQueryStarted: async ({ id, dayNumber, startTime }, { dispatch, queryFulfilled, getState }) => {
        debugLog('üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:', { id, dayNumber, startTime });
        
        const patches: any[] = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–µ—à–∏ –¥–ª—è getTrainingTemplates
        const state = getState() as any;
        const apiState = state.api;
        
        debugLog('üîç –ò—â–µ–º –∫–µ—à–∏ getTrainingTemplates...');
        Object.keys(apiState.queries).forEach(queryKey => {
          if (queryKey.startsWith('getTrainingTemplates')) {
            debugLog('üéØ –ù–∞–π–¥–µ–Ω –∫–µ—à getTrainingTemplates:', queryKey);
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–µ—à–∏ getTrainingTemplates
        Object.keys(apiState.queries).forEach(queryKey => {
          if (queryKey.startsWith('getTrainingTemplates')) {
            try {
              // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–ª—é—á–∞ –∫–µ—à–∞
              let queryArgs = undefined;
              if (queryKey.includes('dayNumber')) {
                // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–Ω—é
                const match = queryKey.match(/"dayNumber":(\d+)/);
                if (match) {
                  queryArgs = { dayNumber: parseInt(match[1]) };
                }
              }
              
              const patchResult = dispatch(
                calendarApiV2.util.updateQueryData('getTrainingTemplates', queryArgs, (draft) => {
                  debugLog(`üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${JSON.stringify(queryArgs)}, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${draft.length}`);
                  const template = draft.find(t => t.id === id);
                  if (template) {
                    debugLog('‚úÖ –ù–∞—à–ª–∏ —à–∞–±–ª–æ–Ω –≤ –∫–µ—à–µ, –æ–±–Ω–æ–≤–ª—è–µ–º:', template);
                    template.day_number = dayNumber;
                    template.start_time = startTime;
                    debugLog('‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:', template);
                  } else {
                    debugLog('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ!');
                  }
                })
              );
              patches.push(patchResult);
            } catch (e) {
              debugLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞ getTrainingTemplates:', e);
            }
          }
        });

        try {
          debugLog('‚è≥ –ñ–¥–µ–º –æ—Ç–≤–µ—Ç API...');
          await queryFulfilled;
          debugLog('‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
          debugLog('‚ùå –û—à–∏–±–∫–∞ API, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          patches.forEach(patch => patch.undo());
        }
      },
      // –ù–ï–¢ invalidatesTags! –¢–æ–ª—å–∫–æ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }),
    deleteTrainingTemplate: builder.mutation<{ success: boolean; id: number }, number>({
      query: (id) => ({
        url: `training_templates/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: (_, __, id) => [
        { type: TRAINING_TEMPLATE_TAG, id },
        { type: TRAINING_TEMPLATE_TAG, id: 'LIST' },
      ],
    }),

    // --- Training Student Templates Endpoints ---
    getTrainingStudentTemplates: builder.query<TrainingStudentTemplate[], { trainingTemplateId?: number } | void>({
      query: (arg) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω trainingTemplateId
        if (arg && typeof arg === 'object' && 'trainingTemplateId' in arg && arg.trainingTemplateId !== undefined) {
          return `training_student_templates/?training_template_id=${arg.trainingTemplateId}`;
        }
        return 'training_student_templates/'; // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ
      },
      providesTags: (result, __, arg) => // `arg` –∑–¥–µ—Å—å —ç—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∞
        result
          ? [
              ...result.map(({ id }) => ({ type: TRAINING_STUDENT_TEMPLATE_TAG, id } as const)),
              { type: TRAINING_STUDENT_TEMPLATE_TAG, id: 'LIST' },
              // –ï—Å–ª–∏ –±—ã–ª –∑–∞–ø—Ä–æ—Å —Å trainingTemplateId, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
              arg && typeof arg === 'object' && 'trainingTemplateId' in arg && arg.trainingTemplateId !== undefined 
                ? { type: TRAINING_STUDENT_TEMPLATE_TAG, id: `LIST_FOR_TEMPLATE_${arg.trainingTemplateId}` }
                : { type: TRAINING_STUDENT_TEMPLATE_TAG, id: 'GENERAL_LIST' } // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ LIST, –∫–∞–∫ –±—ã–ª–æ
            ]
          : [{ type: TRAINING_STUDENT_TEMPLATE_TAG, id: 'LIST' }],
    }),
    getTrainingStudentTemplateById: builder.query<TrainingStudentTemplate, number>({
      query: (id) => `training_student_templates/${id}`,
      providesTags: (_, __, id) => [{ type: TRAINING_STUDENT_TEMPLATE_TAG, id }],
    }),
    createTrainingStudentTemplate: builder.mutation<TrainingStudentTemplate, TrainingStudentTemplateCreate>({
      query: (newStudentTemplate) => ({
        url: 'training_student_templates/',
        method: 'POST',
        body: newStudentTemplate,
      }),
      invalidatesTags: (result) => [
        { type: TRAINING_STUDENT_TEMPLATE_TAG, id: 'LIST' },
        // If server returns the created student-template, also invalidate the parent training template so assigned_students are refreshed
        result ? { type: TRAINING_TEMPLATE_TAG, id: (result as any).training_template_id } : { type: TRAINING_TEMPLATE_TAG, id: 'LIST' },
      ],
    }),
    updateTrainingStudentTemplate: builder.mutation<TrainingStudentTemplate, { id: number; data: TrainingStudentTemplateUpdate }>({
      query: ({ id, data }) => ({
        url: `training_student_templates/${id}`,
        method: 'PUT',
        body: data,
      }),
      invalidatesTags: (result, _error, arg) => [
        { type: TRAINING_STUDENT_TEMPLATE_TAG, id: arg.id },
        // Invalidate parent training template if server returned its id
        result ? { type: TRAINING_TEMPLATE_TAG, id: (result as any).training_template_id } : { type: TRAINING_TEMPLATE_TAG, id: 'LIST' },
      ],
    }),
    deleteTrainingStudentTemplate: builder.mutation<TrainingStudentTemplate, number>({
      query: (id) => ({
        url: `training_student_templates/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, _error, id) => [
        { type: TRAINING_STUDENT_TEMPLATE_TAG, id },
        { type: TRAINING_STUDENT_TEMPLATE_TAG, id: 'LIST' },
        // Invalidate parent template cache if server returned the deleted record with training_template_id
        result ? { type: TRAINING_TEMPLATE_TAG, id: (result as any).training_template_id } : { type: TRAINING_TEMPLATE_TAG, id: 'LIST' },
      ],
    }),

    // --- Real Trainings Endpoints ---
    getRealTrainings: builder.query<RealTraining[], GetRealTrainingsParams | void>({
      query: (params) => {
        if (params) {
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ params
          const queryParams = new URLSearchParams();
          if (params.startDate) queryParams.append('start_date', params.startDate);
          if (params.endDate) queryParams.append('end_date', params.endDate);
          if (params.trainerId) queryParams.append('trainer_id', params.trainerId.toString());
          if (params.trainingTypeId) queryParams.append('training_type_id', params.trainingTypeId.toString());
          if (params.studentId) queryParams.append('student_id', params.studentId.toString());
          if (params.withStudents) queryParams.append('with_students', 'true');
          return `real-trainings/?${queryParams.toString()}`;
        }
        return 'real-trainings/';
      },
      providesTags: (result) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: REAL_TRAINING_TAG, id } as const)),
              { type: REAL_TRAINING_TAG, id: 'LIST' },
            ]
          : [{ type: REAL_TRAINING_TAG, id: 'LIST' }],
    }),
    getRealTrainingById: builder.query<RealTraining, number>({
      query: (id) => `real-trainings/${id}`,
      providesTags: (_, __, id) => [{ type: REAL_TRAINING_TAG, id }],
    }),
    createRealTraining: builder.mutation<RealTraining, RealTrainingCreate>({
      query: (newTraining) => ({
        url: 'real-trainings/',
        method: 'POST',
        body: newTraining,
      }),
      invalidatesTags: [{ type: REAL_TRAINING_TAG, id: 'LIST' }],
    }),
    updateRealTraining: builder.mutation<RealTraining, { id: number; data: RealTrainingUpdate }>({
      query: ({ id, data }) => ({
        url: `real-trainings/${id}`,
        method: 'PUT',
        body: data,
      }),
      invalidatesTags: (_, __, { id }) => [{ type: REAL_TRAINING_TAG, id }],
    }),
    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º—É—Ç–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    moveRealTraining: builder.mutation<RealTraining, { 
      id: number; 
      trainingDate: string; 
      startTime: string; 
    }>({
      query: ({ id, trainingDate, startTime }) => ({
        url: `real-trainings/${id}`,
        method: 'PUT',
        body: {
          training_date: trainingDate,
          start_time: startTime,
        },
      }),
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç—ã
      onQueryStarted: async ({ id, trainingDate, startTime }, { dispatch, queryFulfilled, getState }) => {
        debugLog('üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', { id, trainingDate, startTime });
        
        const patches: any[] = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–µ—à–∏ –¥–ª—è getRealTrainings
        const state = getState() as any;
        const apiState = state.api;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–µ—à–∏ getRealTrainings
        Object.keys(apiState.queries).forEach(queryKey => {
          if (queryKey.startsWith('getRealTrainings')) {
            debugLog('üîç –ù–∞–π–¥–µ–Ω –∫–µ—à:', queryKey);
            
            try {
              // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–ª—é—á–∞ –∫–µ—à–∞
              let queryArgs = undefined;
              if (queryKey.includes('startDate')) {
                // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–∞—Ç—ã
                const match = queryKey.match(/"startDate":"([^"]+)","endDate":"([^"]+)"/);
                if (match) {
                  queryArgs = {
                    startDate: match[1],
                    endDate: match[2]
                  };
                }
              }
              
              const patchResult = dispatch(
                calendarApiV2.util.updateQueryData('getRealTrainings', queryArgs, (draft) => {
                  debugLog(`üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${JSON.stringify(queryArgs)}, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${draft.length}`);
                  const training = draft.find(t => t.id === id);
                  if (training) {
                    debugLog('‚úÖ –ù–∞—à–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –∫–µ—à–µ, –æ–±–Ω–æ–≤–ª—è–µ–º:', training);
                    training.training_date = trainingDate;
                    training.start_time = startTime;
                    debugLog('‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:', training);
                  } else {
                    debugLog('‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ!');
                  }
                })
              );
              patches.push(patchResult);
            } catch (e) {
              debugLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞:', e);
            }
          }
        });

        try {
          debugLog('‚è≥ –ñ–¥–µ–º –æ—Ç–≤–µ—Ç API...');
          await queryFulfilled;
          debugLog('‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
          debugLog('‚ùå –û—à–∏–±–∫–∞ API, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          patches.forEach(patch => patch.undo());
        }
      },
      // –ù–ï–¢ invalidatesTags! –¢–æ–ª—å–∫–æ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }),
    deleteRealTraining: builder.mutation<{ success: boolean; id: number }, number>({
      query: (id) => ({
        url: `real-trainings/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: (_, __, id) => [
        { type: REAL_TRAINING_TAG, id },
        { type: REAL_TRAINING_TAG, id: 'LIST' },
      ],
    }),

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    generateNextWeekTrainings: builder.mutation<{ message: string; created_trainings_count: number }, void>({
      query: () => ({
        url: 'real-trainings/generate-next-week',
        method: 'POST',
      }),
      invalidatesTags: [{ type: REAL_TRAINING_TAG, id: 'LIST' }],
    }),

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    addStudentToRealTraining: builder.mutation<RealTrainingStudent, { training_id: number; student_id: number }>({
      query: ({ training_id, student_id }) => ({
        url: `real-trainings/${training_id}/students`,
        method: 'POST',
        body: { student_id },
      }),
      invalidatesTags: (_, __, { training_id }) => [{ type: REAL_TRAINING_TAG, id: training_id }],
    }),
    updateStudentAttendance: builder.mutation<RealTrainingStudent, { training_id: number; student_id: number; status_of_presence: string }>({
      query: ({ training_id, student_id, status_of_presence }) => ({
        url: `real-trainings/${training_id}/students/${student_id}/attendance`,
        method: 'PUT',
        // Backend expects { status: 'ABSENT' } according to RealTrainingStudentUpdate schema
        body: { status: status_of_presence },
      }),
      invalidatesTags: (_, __, { training_id }) => [{ type: REAL_TRAINING_TAG, id: training_id }],
    }),
    removeStudentFromRealTraining: builder.mutation<{ success: boolean }, { training_id: number; student_id: number }>({
      query: ({ training_id, student_id }) => ({
        url: `real-trainings/${training_id}/students/${student_id}`,
        method: 'DELETE',
      }),
      invalidatesTags: (_, __, { training_id }) => [{ type: REAL_TRAINING_TAG, id: training_id }],
    }),
    cancelStudentFromTraining: builder.mutation<StudentCancellationResponse, { training_id: number; student_id: number; data: StudentCancellationRequest }>({
      query: ({ training_id, student_id, data }) => ({
        url: `real-trainings/${training_id}/students/${student_id}/cancel`,
        method: 'DELETE',
        body: data,
      }),
      invalidatesTags: (_, __, { training_id }) => [{ type: REAL_TRAINING_TAG, id: training_id }],
    }),

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç–º–µ–Ω—ã —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    cancelRealTraining: builder.mutation<RealTraining, { trainingId: number; cancellationData: TrainingCancellationRequest }>({
      query: ({ trainingId, cancellationData }) => ({
        url: `real-trainings/${trainingId}/cancel`,
        method: 'POST',
        body: cancellationData,
      }),
      invalidatesTags: (_, __, { trainingId }) => [{ type: REAL_TRAINING_TAG, id: trainingId }],
    }),

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è Real Trainings:
    // - generateNextWeek
    // - addStudentToRealTraining
    // - removeStudentFromRealTraining
    // - updateStudentAttendance
    // - cancelStudentFromTraining
    // - cancelRealTraining
  }),
  overrideExisting: false, // –í–∞–∂–Ω–æ, –µ—Å–ª–∏ baseApi —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ
});

export const {
  useGetTrainingTemplatesQuery,
  useGetTrainingTemplateByIdQuery,
  useCreateTrainingTemplateMutation,
  useUpdateTrainingTemplateMutation,
  useMoveTrainingTemplateMutation,
  useDeleteTrainingTemplateMutation,
  useGetTrainingStudentTemplatesQuery,
  useGetTrainingStudentTemplateByIdQuery,
  useCreateTrainingStudentTemplateMutation,
  useUpdateTrainingStudentTemplateMutation,
  useDeleteTrainingStudentTemplateMutation,
  useGetRealTrainingsQuery,
  useGetRealTrainingByIdQuery,
  useCreateRealTrainingMutation,
  useUpdateRealTrainingMutation,
  useMoveRealTrainingMutation,
  useDeleteRealTrainingMutation,
  useGenerateNextWeekTrainingsMutation,
  useAddStudentToRealTrainingMutation,
  useRemoveStudentFromRealTrainingMutation,
  useUpdateStudentAttendanceMutation,
  useCancelStudentFromTrainingMutation,
  useCancelRealTrainingMutation,
  // TODO: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö—É–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
} = calendarApiV2;

// –≠–∫—Å–ø–æ—Ä—Ç —Ö—É–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
// export const {
//   useGetScheduleTemplateQuery,
//   useGetActualTrainingsQuery,
//   // ...–¥—Ä—É–≥–∏–µ —Ö—É–∫–∏
// } = calendarApiV2;

// –¢–µ–≥–∏ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ api.ts)
// –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–µ–≥–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ api.ts, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ API —Å–ª–∞–π—Å–∞–º–∏.
// –ï—Å–ª–∏ –æ–Ω–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è calendarApiV2, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.
// –ü—Ä–∏–º–µ—Ä—ã:
// export const SCHEDULE_TEMPLATE_V2_TAG = 'ScheduleTemplateV2';
// export const ACTUAL_TRAININGS_V2_TAG = 'ActualTrainingsV2'; 