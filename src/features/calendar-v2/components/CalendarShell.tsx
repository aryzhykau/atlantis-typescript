import React, { useMemo, useState, useCallback, useEffect, memo, useRef } from 'react';
import { Box, Typography, Paper, useTheme, useMediaQuery, Tooltip } from '@mui/material';
import { alpha } from '@mui/material/styles';
import { DndProvider, useDragLayer } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import dayjs, { Dayjs } from 'dayjs';
import isoWeek from 'dayjs/plugin/isoWeek';
import { CalendarViewMode } from './CalendarV2Page'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∏–ø—ã —Ç–∞–º –∂–µ
import { TrainingTemplate, TrainingTemplateCreate } from '../models/trainingTemplate';
import { RealTraining, RealTrainingCreate } from '../models/realTraining';
import { TrainingStudentTemplateCreate } from '../models/trainingStudentTemplate';
import TrainingTemplateForm from './TrainingTemplateForm'; // –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ä–º—ã
import TrainingTemplateModal from './TrainingTemplateModal'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
import RealTrainingModal from './RealTrainingModal'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫


import { useSnackbar } from '../../../hooks/useSnackBar';
import { 
  useMoveTrainingTemplateMutation, 
  useMoveRealTrainingMutation,
  useCreateTrainingTemplateMutation,
  useCreateRealTrainingMutation,
  useCreateTrainingStudentTemplateMutation,
  useAddStudentToRealTrainingMutation,
  useGetTrainingTemplatesQuery,
  useGetRealTrainingsQuery
} from '../../../store/apis/calendarApi-v2';
import DraggableTrainingChip from './DraggableTrainingChip';
import DroppableSlotComponent from './DroppableSlot';
import CalendarTrainingChip from './CalendarTrainingChip';
import { debugLog } from '../utils/debug';
import { useAltKey } from '../hooks/useAltKey';

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dayjs –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ISO –Ω–µ–¥–µ–ª—è–º–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
dayjs.extend(isoWeek);

// –û–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export type CalendarEvent = TrainingTemplate | RealTraining;

interface CalendarShellProps {
  currentDate: Dayjs;
  viewMode: CalendarViewMode;
  templatesData?: TrainingTemplate[];
  actualData?: RealTraining[];
  isLoading: boolean;
  error?: any; // –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ TrainingTemplate
export function isTrainingTemplate(event: CalendarEvent): event is TrainingTemplate {
  return 'day_number' in event && typeof event.day_number === 'number';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ RealTraining
export function isRealTraining(event: CalendarEvent): event is RealTraining {
  return 'training_date' in event && typeof event.training_date === 'string';
}

interface SelectedSlotInfo {
  date: Dayjs;
  time: string;
}



const CalendarShell: React.FC<CalendarShellProps> = memo(({
  currentDate,
  viewMode,
  templatesData,
  actualData,
  isLoading,
  error,
}) => {
  const theme = useTheme(); // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–º–µ
  const isMobile = useMediaQuery(theme.breakpoints.down('md')); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
  const isTablet = useMediaQuery(theme.breakpoints.down('lg')); // –ü–ª–∞–Ω—à–µ—Ç
  
  const daysOfWeek = useMemo(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º isoWeek –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    const startOfWeek = currentDate.startOf('isoWeek');
    return Array.from({ length: 7 }).map((_, i) => startOfWeek.add(i, 'day'));
  }, [currentDate]);

  const timeSlots = useMemo(() => {
    const slots = [];
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —Å 06:00 –¥–æ 22:00 (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç 22:00-23:00)
    for (let hour = 6; hour <= 22; hour++) {
      slots.push(dayjs().hour(hour).minute(0).format('HH:mm'));
    }
    return slots;
  }, []);

  // –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç viewMode
  const eventsToDisplay: CalendarEvent[] = useMemo(() => {
    let events: CalendarEvent[] = [];
    if (viewMode === 'scheduleTemplate') {
      events = templatesData || [];
      debugLog(`üìä –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: ${events.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    } else {
      events = actualData || [];
      debugLog(`üìä –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: ${events.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }
    return events;
  }, [viewMode, templatesData, actualData]);

  // Hooks –¥–ª—è drag and drop (–ü–ï–†–ï–ú–ï–©–ï–ù–û –°–Æ–î–ê - –¥–æ getEventsForSlot)
  const { displaySnackbar } = useSnackbar();
  const [moveTrainingTemplate] = useMoveTrainingTemplateMutation();
  const [moveRealTraining] = useMoveRealTrainingMutation();
  const [createTrainingTemplate] = useCreateTrainingTemplateMutation();
  const [createRealTraining] = useCreateRealTrainingMutation();
  const [createTrainingStudentTemplate] = useCreateTrainingStudentTemplateMutation();
  const [addStudentToRealTraining] = useAddStudentToRealTrainingMutation();
  
  // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ—Å–ª–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const { refetch: refetchTemplates } = useGetTrainingTemplatesQuery();
  const { refetch: refetchRealTrainings } = useGetRealTrainingsQuery({
    startDate: currentDate.startOf('isoWeek').format('YYYY-MM-DD'),
    endDate: currentDate.endOf('isoWeek').format('YYYY-MM-DD'),
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–∞–≥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [isDragging, setIsDragging] = useState(false);

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π Alt listener - —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≤–µ—Å—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å  
  const { isAltPressed, getCurrentAltState, forceResetAltState } = useAltKey();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è/–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å react-dnd
  const handleTrainingDrop = useCallback(async (
    event: CalendarEvent, 
    sourceDay: Dayjs, 
    sourceTime: string, 
    targetDay: Dayjs, 
    targetTime: string,
    isDuplicate: boolean = false // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  ) => {
    // isDuplicate —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ DroppableSlot
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if (sourceDay.isSame(targetDay, 'day') && sourceTime === targetTime) {
      return; // –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    }

    debugLog(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º ${isDuplicate ? '–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ'} —Å react-dnd:`, { 
      eventId: event.id, 
      from: `${sourceDay.format('ddd')} ${sourceTime}`,
      to: `${targetDay.format('ddd')} ${targetTime}`,
      isDuplicate,
      ctrlPressed: isDuplicate
    });

    try {
      if (isDuplicate) {
        // –õ–æ–≥–∏–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if (isTrainingTemplate(event)) {
          const dayNumber = targetDay.day() === 0 ? 7 : targetDay.day(); // 1-7 (1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
          const originalStudents = event.assigned_students || [];
          
          const newTemplate: TrainingTemplateCreate = {
            training_type_id: event.training_type?.id!,
            responsible_trainer_id: event.responsible_trainer?.id!,
            day_number: dayNumber,
            start_time: targetTime,
          };
          
          // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
          const createdTemplate = await createTrainingTemplate(newTemplate).unwrap();
          
          // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
          if (originalStudents.length > 0) {
            const studentPromises = originalStudents.map(async (studentTemplate) => {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é start_date - –æ–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç "—Å –∫–∞–∫–æ–π –¥–∞—Ç—ã 
              // —Å—Ç—É–¥–µ–Ω—Ç —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Ç–∏–ø–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
              const startDate = studentTemplate.start_date;
              
              const studentData: TrainingStudentTemplateCreate = {
                training_template_id: createdTemplate.id,
                student_id: studentTemplate.student.id,
                start_date: startDate, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É
                is_frozen: studentTemplate.is_frozen,
              };
              return createTrainingStudentTemplate(studentData).unwrap();
            });
            
            await Promise.all(studentPromises);
          }
          
          debugLog('üéâ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          const studentCount = originalStudents.length;
          const studentText = studentCount > 0 ? ` (—Å–æ ${studentCount} —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏)` : '';
          displaySnackbar(`üìã –®–∞–±–ª–æ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ "${event.training_type?.name}" –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω${studentText}`, 'success');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
          refetchTemplates();
        } else if (isRealTraining(event)) {
          const trainingDate = targetDay.format('YYYY-MM-DD');
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
          const originalStudents = event.students || [];
          
          const newTraining: RealTrainingCreate = {
            training_type_id: event.training_type?.id!,
            responsible_trainer_id: event.trainer?.id!,
            training_date: trainingDate,
            start_time: targetTime,
          };
          
          // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
          const createdTraining = await createRealTraining(newTraining).unwrap();
          
          // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
          if (originalStudents.length > 0) {
            const studentPromises = originalStudents.map(async (trainingStudent) => {
              return addStudentToRealTraining({
                training_id: createdTraining.id,
                student_id: trainingStudent.student.id,
              }).unwrap();
            });
            
            await Promise.all(studentPromises);
          }
          
          debugLog('üéâ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          const studentCount = originalStudents.length;
          const studentText = studentCount > 0 ? ` (—Å–æ ${studentCount} —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏)` : '';
          displaySnackbar(`üìã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ "${event.training_type?.name}" –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞${studentText}`, 'success');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
          refetchRealTrainings();
        }
      } else {
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
        if (isTrainingTemplate(event)) {
          const dayNumber = targetDay.day() === 0 ? 7 : targetDay.day(); // 1-7 (1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
          
          await moveTrainingTemplate({
            id: event.id,
            dayNumber,
            startTime: targetTime,
          }).unwrap();
          
          debugLog('üéâ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          displaySnackbar(`‚úÖ –®–∞–±–ª–æ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ "${event.training_type?.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω`, 'success');
        } else if (isRealTraining(event)) {
          const trainingDate = targetDay.format('YYYY-MM-DD');
          
          await moveRealTraining({
            id: event.id,
            trainingDate,
            startTime: targetTime,
          }).unwrap();
          
          debugLog('üéâ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          displaySnackbar(`‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ "${event.training_type?.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞`, 'success');
        }
      }
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ ${isDuplicate ? '–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏' : '–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏'} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:`, error);
      const errorMessage = error?.data?.detail || error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      displaySnackbar(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å ${isDuplicate ? '–ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å' : '–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å'} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: ${errorMessage}`, 'error');
    }
  }, [moveTrainingTemplate, moveRealTraining, createTrainingTemplate, createRealTraining, createTrainingStudentTemplate, addStudentToRealTraining, displaySnackbar, refetchTemplates, refetchRealTrainings]);

  const getEventsForSlot = useCallback((day: Dayjs, time: string): CalendarEvent[] => {
    const slotHour = parseInt(time.split(':')[0]);
    const slotMinute = parseInt(time.split(':')[1]);
    const slotKey = `${day.format('ddd')} ${time}`;

    let filteredEvents: CalendarEvent[] = [];

    if (viewMode === 'scheduleTemplate') {
      filteredEvents = eventsToDisplay.filter(event => {
        if (isTrainingTemplate(event)) {
          // day_number: 1-7 (1 - –ü–Ω), day.day(): 0-6 (0 - –í—Å), –ø–æ—ç—Ç–æ–º—É +1 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
          const eventStartTime = event.start_time.substring(0, 5); // "HH:MM"
          const matches = event.day_number === (day.day() === 0 ? 7 : day.day()) && eventStartTime === time;
          
          if (matches) {
            debugLog(`üìç –°–ª–æ—Ç ${slotKey}: –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω #${event.id} "${event.training_type?.name}"`);
          }
          
          return matches;
        }
        return false;
      });
    } else if (viewMode === 'actualTrainings') {
      filteredEvents = eventsToDisplay.filter(event => {
        if (isRealTraining(event)) {
          const eventStart = dayjs(`${event.training_date}T${event.start_time}`);
          const matches = eventStart.isSame(day, 'day') &&
                 eventStart.hour() === slotHour &&
                 eventStart.minute() === slotMinute;
                 
          if (matches) {
            debugLog(`üìç –°–ª–æ—Ç ${slotKey}: –Ω–∞–π–¥–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ #${event.id} "${event.training_type?.name}"`);
          }
          
          return matches;
        }
        return false;
      });
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —Å–ª–æ—Ç–µ
    if (filteredEvents.length > 0) {
      debugLog(`üéØ –†–µ–Ω–¥–µ—Ä —Å–ª–æ—Ç–∞ ${slotKey}: ${filteredEvents.length} —Å–æ–±—ã—Ç–∏–π`);
    }
    
    return filteredEvents;
  }, [eventsToDisplay, viewMode]);

  const [isFormOpen, setIsFormOpen] = useState(false);
  const [selectedSlotInfo, setSelectedSlotInfo] = useState<SelectedSlotInfo | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [selectedEventId, setSelectedEventId] = useState<number | null>(null);
  const [selectedEventType, setSelectedEventType] = useState<'template' | 'real' | null>(null);
  
  // –£–±—Ä–∞–ª–∏ hoveredSlot —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π CSS hover

  const handleSlotClick = useCallback((_event: React.MouseEvent<HTMLElement>, day: Dayjs, time: string, _eventsInSlot: CalendarEvent[]) => {
    // –í —Ä–µ–∂–∏–º–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
    if (viewMode === 'scheduleTemplate') {
      setSelectedSlotInfo({ date: day, time });
      setIsFormOpen(true);
    }
  }, [viewMode]);

  const handleOpenDetailModal = useCallback((eventData: CalendarEvent) => {
    setSelectedEventId(eventData.id);
    setSelectedEventType(isTrainingTemplate(eventData) ? 'template' : 'real');
    setIsDetailModalOpen(true);
  }, []);

  const handleCloseDetailModal = useCallback(() => {
    setIsDetailModalOpen(false);
    setSelectedEventId(null);
    setSelectedEventType(null);
  }, []);

  const handleCloseForm = useCallback(() => {
    setIsFormOpen(false);
    setSelectedSlotInfo(null);
  }, []);



  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
  const responsiveStyles = useMemo(() => {
    if (isMobile) {
      return {
        gridTemplateColumns: '60px repeat(7, minmax(80px, 1fr))',
        fontSize: '0.7rem',
        slotHeight: '80px',
        cardPadding: '2px',
      };
    } else if (isTablet) {
      return {
        gridTemplateColumns: '80px repeat(7, minmax(100px, 1fr))',
        fontSize: '0.8rem',
        slotHeight: '100px', // –£–≤–µ–ª–∏—á–∏–ª —Å 80px
        cardPadding: '4px',
      };
    } else {
      return {
        gridTemplateColumns: '100px repeat(7, minmax(140px, 1fr))', // –£–≤–µ–ª–∏—á–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Å 120px
        fontSize: '0.9rem',
        slotHeight: '110px', // –£–≤–µ–ª–∏—á–∏–ª —Å 90px
        cardPadding: '6px',
      };
    }
  }, [isMobile, isTablet]);

  return (
    <DndProvider backend={HTML5Backend}>
      <CalendarContent 
        {...{
          currentDate,
          viewMode, 
          templatesData,
          actualData,
          isLoading,
          error,
          eventsToDisplay,
          getEventsForSlot,
          handleTrainingDrop,
          handleSlotClick,
          handleOpenDetailModal,
          handleCloseDetailModal,
          handleCloseForm,
          responsiveStyles,
          selectedSlotInfo,
          isFormOpen,
          isDetailModalOpen,
          selectedEventId,
          selectedEventType,
          daysOfWeek,
          timeSlots,
          isMobile,
          isTablet,
          theme,
          isDragging,
          setIsDragging,
          isAltPressed,
          getCurrentAltState,
          forceResetAltState,
        }}
      />
    </DndProvider>
  );
});

// –¢–∏–ø—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface CalendarContentProps {
  currentDate: Dayjs;
  viewMode: CalendarViewMode;
  templatesData?: TrainingTemplate[];
  actualData?: RealTraining[];
  isLoading: boolean;
  error?: any;
  eventsToDisplay: CalendarEvent[];
  getEventsForSlot: (day: Dayjs, time: string) => CalendarEvent[];
  handleTrainingDrop: (event: CalendarEvent, sourceDay: Dayjs, sourceTime: string, targetDay: Dayjs, targetTime: string, isDuplicate?: boolean) => Promise<void>;
  handleSlotClick: (event: React.MouseEvent<HTMLElement>, day: Dayjs, time: string, eventsInSlot: CalendarEvent[]) => void;
  handleOpenDetailModal: (eventData: CalendarEvent) => void;
  handleCloseDetailModal: () => void;
  handleCloseForm: () => void;
  responsiveStyles: any;
  selectedSlotInfo: SelectedSlotInfo | null;
  isFormOpen: boolean;
  isDetailModalOpen: boolean;
  selectedEventId: number | null;
  selectedEventType: 'template' | 'real' | null;
  daysOfWeek: Dayjs[];
  timeSlots: string[];
  isMobile: boolean;
  isTablet: boolean;
  theme: any;
  isDragging: boolean;
  setIsDragging: (value: boolean) => void;
  // –î–æ–±–∞–≤–ª—è–µ–º Alt —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isAltPressed: boolean;
  getCurrentAltState: () => boolean;
  forceResetAltState: () => void;

}

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å drag & drop –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
const CalendarContent: React.FC<CalendarContentProps> = memo((props) => {
  const {
    viewMode, templatesData, actualData, isLoading, error,
    getEventsForSlot, handleTrainingDrop, handleSlotClick,
    handleOpenDetailModal, handleCloseDetailModal, handleCloseForm,
    responsiveStyles, selectedSlotInfo, isFormOpen, isDetailModalOpen,
    selectedEventId, selectedEventType, daysOfWeek, timeSlots,
    isMobile, isTablet, theme, isDragging, setIsDragging,
    isAltPressed, getCurrentAltState, forceResetAltState
  } = props;

  // –†–µ—Ñ—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–∫—Ä–æ–ª–ª–∞
  const paperScrollRef = useRef<HTMLDivElement>(null);
  const autoScrollIntervalRef = useRef<number | null>(null);

  // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å useDragLayer –≤–Ω—É—Ç—Ä–∏ DndProvider
  const { isDraggingGlobal, clientOffset } = useDragLayer((monitor) => ({
    isDraggingGlobal: monitor.isDragging(),
    clientOffset: monitor.getClientOffset(),
  }));

  // –•—É–∫ –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
  useEffect(() => {
    if (!isDraggingGlobal || !clientOffset || !paperScrollRef.current) {
      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –Ω–µ –¥—Ä–∞–≥–∞–µ–º
      if (autoScrollIntervalRef.current) {
        window.clearInterval(autoScrollIntervalRef.current);
        autoScrollIntervalRef.current = null;
      }
      return;
    }

    const container = paperScrollRef.current;
    const containerRect = container.getBoundingClientRect();
    const scrollThreshold = 120; // –ó–æ–Ω–∞ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ –æ—Ç –∫—Ä–∞—è viewport
    const scrollSpeed = 15; // –°–∫–æ—Ä–æ—Å—Ç—å —Å–∫—Ä–æ–ª–ª–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ VIEWPORT (–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!)
    const mouseY = clientOffset.y;
    const viewportHeight = window.innerHeight;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –∫—Ä–∞–µ–≤ –≠–ö–†–ê–ù–ê
    const distanceFromViewportTop = mouseY;
    const distanceFromViewportBottom = viewportHeight - mouseY;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const containerVisibleTop = Math.max(containerRect.top, 0);
    const containerVisibleBottom = Math.min(containerRect.bottom, viewportHeight);
    
    // –î–µ–±–∞–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏
    if (!autoScrollIntervalRef.current) {
      debugLog('üéØ Autoscroll viewport check:', {
        mouseY,
        viewportHeight,
        distanceFromViewportTop,
        distanceFromViewportBottom,
        containerTop: containerRect.top,
        containerBottom: containerRect.bottom,
        containerVisibleTop,
        containerVisibleBottom,
        canScrollUp: container.scrollTop > 0,
        canScrollDown: container.scrollTop < (container.scrollHeight - container.clientHeight)
      });
    }
    
    let shouldScroll = false;
    let scrollDirection: 'up' | 'down' | null = null;
    
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö: –∫—É—Ä—Å–æ—Ä –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞ + –º–æ–∂–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ç—å –≤–≤–µ—Ä—Ö
    if (distanceFromViewportTop < scrollThreshold && 
        mouseY > containerVisibleTop && // –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç—å—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container.scrollTop > 0) {
      shouldScroll = true;
      scrollDirection = 'up';
      debugLog('üîº –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (viewport)');
    } 
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑: –∫—É—Ä—Å–æ—Ä –±–ª–∏–∑–∫–æ –∫ –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ + –º–æ–∂–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ç—å –≤–Ω–∏–∑  
    else if (distanceFromViewportBottom < scrollThreshold && 
             mouseY < containerVisibleBottom && // –∫—É—Ä—Å–æ—Ä –ø–æ–¥ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç—å—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
             container.scrollTop < (container.scrollHeight - container.clientHeight)) {
      shouldScroll = true;
      scrollDirection = 'down';
      debugLog('üîΩ –°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (viewport)');
    }
    
    if (shouldScroll && scrollDirection) {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (autoScrollIntervalRef.current) {
        window.clearInterval(autoScrollIntervalRef.current);
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
      autoScrollIntervalRef.current = window.setInterval(() => {
        if (scrollDirection === 'up') {
          container.scrollTop = Math.max(0, container.scrollTop - scrollSpeed);
        } else if (scrollDirection === 'down') {
          container.scrollTop = Math.min(
            container.scrollHeight - container.clientHeight,
            container.scrollTop + scrollSpeed
          );
        }
      }, 16); // ~60 FPS
    } else {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–µ —É –∫—Ä–∞—è
      if (autoScrollIntervalRef.current) {
        window.clearInterval(autoScrollIntervalRef.current);
        autoScrollIntervalRef.current = null;
      }
    }
  }, [isDraggingGlobal, clientOffset]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  useEffect(() => {
    setIsDragging(isDraggingGlobal);
    if (isDraggingGlobal) {
      debugLog('üéØ –ù–∞—á–∞–ª—Å—è drag - —Ç—É–ª—Ç–∏–ø—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    } else {
      debugLog('üéØ Drag –∑–∞–≤–µ—Ä—à–µ–Ω - —Ç—É–ª—Ç–∏–ø—ã –≤–∫–ª—é—á–µ–Ω—ã');
    }
  }, [isDraggingGlobal, setIsDragging]);

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (autoScrollIntervalRef.current) {
        window.clearInterval(autoScrollIntervalRef.current);
      }
    };
  }, []);

  return (
      <Paper 
        ref={paperScrollRef}
        elevation={3} 
        sx={{
          p: isMobile ? 1 : 2, 
          mt: 2, 
          overflow: 'auto',
          maxHeight: '75vh',
          display: 'flex',
          flexDirection: 'column'
        }}
      >
      {isLoading && <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</Typography>}
      {error && <Typography color="error">–û—à–∏–±–∫–∞: {error?.message || JSON.stringify(error)}</Typography>}
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è */}
      <Box sx={{ 
        display: 'flex', 
        flexDirection: 'column', 
        gap: theme.spacing(0.5),
        flexGrow: 1
      }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ */}
        <Box sx={{
          display: 'grid',
          gridTemplateColumns: responsiveStyles.gridTemplateColumns,
          gap: theme.spacing(0.5),
          alignItems: 'center'
        }}>
          <Box sx={{ 
            textAlign: 'center', 
            p: 1,
            minHeight: '60px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}>
            <Typography variant="caption" sx={{ fontSize: responsiveStyles.fontSize }}>
              –í—Ä–µ–º—è
            </Typography>
          </Box>
          {daysOfWeek.map(day => (
            <Box 
              key={day.toString()} 
              sx={{ 
                textAlign: 'center', 
                p: 1, 
                backgroundColor: theme.palette.background.paper,
                borderRadius: 1,
                minHeight: '60px',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center'
              }}
            >
              <Typography variant="subtitle2" sx={{ fontSize: responsiveStyles.fontSize }}>
                {day.format('dd').toUpperCase()}
              </Typography>
              <Typography variant="h6" sx={{ fontSize: isMobile ? '1rem' : '1.2rem' }}>
                {day.format('D')}
              </Typography>
            </Box>
          ))}
        </Box>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ */}
        <Box 
          sx={{ 
            flexGrow: 1
          }}
        >
          {timeSlots.map(time => (
            <Box 
              key={time} 
              sx={{
                display: 'grid',
                gridTemplateColumns: responsiveStyles.gridTemplateColumns,
                gap: theme.spacing(0.5),
                alignItems: 'stretch',
                mb: 0.5
              }}
            >
              {/* –ö–æ–ª–æ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ */}
              <Box sx={{ 
                textAlign: 'center',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                minHeight: responsiveStyles.slotHeight
              }}>
                <Typography variant="caption" sx={{ fontSize: responsiveStyles.fontSize }}>
                  {time}
                </Typography>
              </Box>
              
              {/* –°–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è */}
              {daysOfWeek.map(day => {
                const slotEvents: CalendarEvent[] = getEventsForSlot(day, time);
                const maxChips = isMobile ? 2 : (isTablet ? 3 : 4);
                const visibleEvents = slotEvents.slice(0, maxChips);
                const hiddenEventsCount = slotEvents.length - maxChips;
                const slotKey = `${day.format('YYYY-MM-DD')}-${time}`;

                return (
                  <DroppableSlotComponent
                    key={slotKey}
                    day={day}
                    time={time}
                    onClick={(e) => handleSlotClick(e, day, time, slotEvents)}
                    onDrop={handleTrainingDrop}
                    isAltPressed={isAltPressed}
                    getCurrentAltState={getCurrentAltState}
                    forceResetAltState={forceResetAltState}
                    sx={{
                      minHeight: responsiveStyles.slotHeight,
                      backgroundColor: theme.palette.background.paper,
                      borderRadius: 1,
                      p: responsiveStyles.cardPadding,
                      position: 'relative',
                      display: 'flex',
                      flexDirection: 'column',
                      justifyContent: 'flex-start',
                      cursor: viewMode === 'scheduleTemplate' ? 'pointer' : 'default',
                      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ transitions –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                      transition: 'background-color 0.15s ease-out, box-shadow 0.15s ease-out',
                      overflow: 'visible', // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç—É–ª—Ç–∏–ø–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
                      '&:hover': viewMode === 'scheduleTemplate' ? {
                        backgroundColor: slotEvents.length === 0 
                          ? theme.palette.background.default 
                          : alpha(theme.palette.primary.main, 0.04),
                        boxShadow: `0 0 0 2px ${alpha(theme.palette.primary.main, 0.4)}`,
                        // –£–±—Ä–∞–ª–∏ transform: scale –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ hover
                        '& .create-hint': {
                          opacity: 0.6,
                        },
                        '& .add-button': {
                          opacity: 1,
                        },
                      } : {},
                    }}
                  >
                    {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ */}
                    {slotEvents.length > 0 && (
                      <Box sx={{ 
                        display: 'flex',
                        flexDirection: 'column',
                        gap: 0.5,
                        height: '100%',
                        overflow: 'visible',
                        paddingRight: viewMode === 'scheduleTemplate' ? '28px' : '0px', // –ú–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "+"
                      }}>
                        {visibleEvents.map((eventItem, _) => (
                          <DraggableTrainingChip
                            key={eventItem.id}
                            event={eventItem}
                            day={day}
                            time={time}
                          >
                            <CalendarTrainingChip 
                              event={eventItem} 
                              isMobile={isMobile}
                              isTablet={isTablet}
                              onEventClick={handleOpenDetailModal}
                              // isDragActive –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ DraggableTrainingChip
                            />
                          </DraggableTrainingChip>
                        ))}
                        
                        {hiddenEventsCount > 0 && (
                          <Tooltip 
                            title={isDragging ? '' : `–ï—â—ë ${hiddenEventsCount} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ.`}
                            arrow 
                            placement="top"
                            disableHoverListener={isDragging}
                            disableFocusListener={isDragging}
                            disableTouchListener={isDragging}
                            open={isDragging ? false : undefined}
                          >
                            <Box
                              sx={{
                                backgroundColor: alpha(theme.palette.background.paper, 0.95), // Match chip background
                                borderLeft: `3px solid ${theme.palette.primary.main}`, // Only thin left border
                                borderRadius: 2,
                                px: 1,
                                py: 0.5,
                                cursor: 'pointer',
                                textAlign: 'center',
                                transition: 'transform 0.15s ease-out, box-shadow 0.15s ease-out, background-color 0.15s ease-out',
                                '&:hover': {
                                  transform: 'translateY(-1px)',
                                  backgroundColor: theme.palette.background.paper,
                                  boxShadow: `0 2px 8px ${alpha(theme.palette.primary.main, 0.12)}`,
                                },
                              }}
                            >
                              <Typography
                                variant="caption"
                                sx={{
                                  fontSize: '0.7rem',
                                  fontWeight: 600,
                                  color: theme.palette.primary.main,
                                }}
                              >
                                –µ—â—ë +{hiddenEventsCount}
                              </Typography>
                            </Box>
                          </Tooltip>
                        )}
                      </Box>
                    )}

                    {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
                    {viewMode === 'scheduleTemplate' && (
                      <>
                                                {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ */}
                        {slotEvents.length === 0 && (
                          <Box
                            className="create-hint"
                            sx={{
                              position: 'absolute',
                              top: '50%',
                              left: '50%',
                              transform: 'translate(-50%, -50%)',
                              opacity: 0,
                              transition: 'opacity 0.15s ease-out',
                            }}
                          >
                            <Typography 
                              variant="caption" 
                              sx={{ 
                                fontSize: '0.7rem',
                                color: theme.palette.text.secondary,
                                textAlign: 'center',
                              }}
                            >
                              + –°–æ–∑–¥–∞—Ç—å
                            </Typography>
                          </Box>
                        )}

                        {/* –ö–Ω–æ–ø–∫–∞ "+" –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ */}
                        {slotEvents.length > 0 && (
                          <Tooltip 
                            title={isDragging ? '' : "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç"} 
                            arrow 
                            placement="top"
                            disableHoverListener={isDragging}
                            disableFocusListener={isDragging}
                            disableTouchListener={isDragging}
                            open={isDragging ? false : undefined}
                          >
                            <Box
                              className="add-button"
                              sx={{
                                position: 'absolute',
                                top: 4,
                                right: 4,
                                width: 18,
                                height: 18,
                                borderRadius: '50%',
                                backgroundColor: alpha(theme.palette.primary.main, 0.9),
                                color: 'white',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                opacity: 0,
                                transition: 'opacity 0.15s ease-out, background-color 0.15s ease-out',
                                cursor: 'pointer',
                                zIndex: 10,
                                '&:hover': {
                                  backgroundColor: theme.palette.primary.main,
                                },
                              }}
                              onClick={(e) => {
                                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤ handleSlotClick
                                handleSlotClick(e, day, time, slotEvents);
                              }}
                            >
                              <Typography 
                                variant="caption" 
                                sx={{ 
                                  fontSize: '12px',
                                  fontWeight: 600,
                                  lineHeight: 1,
                                }}
                              >
                                +
                              </Typography>
                            </Box>
                          </Tooltip>
                        )}
                      </>
                    )}
                  </DroppableSlotComponent>
                );
              })}
            </Box>
          ))}
        </Box>
      </Box>

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ */}
      {selectedSlotInfo && (
        <TrainingTemplateForm 
          open={isFormOpen}
          onClose={handleCloseForm}
          selectedDate={selectedSlotInfo.date}
          selectedTime={selectedSlotInfo.time}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ */}
      {selectedEventType === 'template' && (
        <TrainingTemplateModal 
          open={isDetailModalOpen}
          onClose={handleCloseDetailModal}
          templateId={selectedEventId}
        />
      )}
      {selectedEventType === 'real' && (
        <RealTrainingModal 
          open={isDetailModalOpen}
          onClose={handleCloseDetailModal}
          trainingId={selectedEventId}
        />
      )}

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) */}
      {viewMode === 'scheduleTemplate' && templatesData && !isLoading && (
        <Box mt={2} sx={{display:'none'}}>
          <Typography variant="subtitle1">Template Data:</Typography>
          <Typography>–ó–∞–≥—Ä—É–∂–µ–Ω–æ {templatesData.length} —à–∞–±–ª–æ–Ω–æ–≤.</Typography>
        </Box>
      )}
      {viewMode === 'actualTrainings' && actualData && !isLoading && (
        <Box mt={2} sx={{display:'none'}}>
          <Typography variant="subtitle1">Actual Trainings Data:</Typography>
          <Typography>–ó–∞–≥—Ä—É–∂–µ–Ω–æ {actualData.length} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.</Typography>
        </Box>
      )}
    </Paper>
  );
});
  
export default CalendarShell; 