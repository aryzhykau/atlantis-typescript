import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Grid,
  Divider,
  Chip,
  Avatar,
  FormControlLabel,
  Switch,
  CircularProgress,
} from '@mui/material';
import {
  Person,
  Euro,
  Add as AddIcon,
  Payment as PaymentIcon,
  History as HistoryIcon,
} from '@mui/icons-material';
import { Formik, Form, Field } from 'formik';
import { TextField as FormikTextField, Select as FormikSelect } from 'formik-mui';
import * as Yup from 'yup';
import dayjs from 'dayjs';
import { useCreateQuickPaymentMutation, useGetTrainerTrainingsRangeQuery, useGetTrainerPaymentsQuery, useGetTrainerStudentsQuery } from '../api/trainerApi';
import { useSnackbar } from '../../../hooks/useSnackBar';
import { useAuth } from '../../../hooks/useAuth';
import { skipToken } from '@reduxjs/toolkit/query/react';
import { useGetCurrentUserQuery } from '../../../store/apis/userApi';

type PeriodFilter = 'week' | 'month' | '3months';

interface PaymentFormData {
  student_id: number;
  amount: string;
}

const PaymentSchema = Yup.object({
  student_id: Yup.number().required('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞'),
  amount: Yup.number()
    .required('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
    .positive('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
    .min(0.01, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 0.01 ‚Ç¨'),
});

export const TrainerPayments: React.FC = () => {
  const [showForm, setShowForm] = useState(false);
  const [period, setPeriod] = useState<PeriodFilter>('week');

  const { displaySnackbar } = useSnackbar();
  const [createPayment, { isLoading: isCreating }] = useCreateQuickPaymentMutation();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç—Ä–µ–Ω–µ—Ä–∞)
  const { data: user, isLoading: isLoadingUser } = useGetCurrentUserQuery();
  const trainerId = user?.id;

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
  const { data: students = [], isLoading: isLoadingStudents } = useGetTrainerStudentsQuery(
    trainerId ? { trainer_id: trainerId } : skipToken
  );

  // –û—Ç–ª–∞–¥–∫–∞: —Å–º–æ—Ç—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  console.log('Students data:', students);
  if (students.length > 0) {
    console.log('First student:', students[0]);
    console.log('First student client:', students[0]?.client);
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
  const { data: payments, isLoading: isLoadingPayments } = useGetTrainerPaymentsQuery({
    period,
  });

  const handleFormSubmit = async (values: PaymentFormData, { resetForm }: any) => {
    const selectedStudent = students.find(s => s.id === values.student_id);
    if (!selectedStudent?.client?.id) {
      displaySnackbar('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞', 'error');
      return;
    }

    try {
      await createPayment({
        client_id: selectedStudent.client.id,
        amount: parseFloat(values.amount),
        description: `–û–ø–ª–∞—Ç–∏–ª–∏ –∑–∞ ${selectedStudent.first_name} ${selectedStudent.last_name}`,
      }).unwrap();

      displaySnackbar('–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'success');
      resetForm();
      setShowForm(false);
    } catch (error: any) {
      displaySnackbar(
        error?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞',
        'error'
      );
    }
  };

  if (isLoadingUser || isLoadingStudents || isLoadingPayments) {
    return (
      <Box sx={{ p: 2, pb: 10, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 2, pb: 10 }}>
      {/* Header */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 1 }}>
          üí∞ –ü–ª–∞—Ç–µ–∂–∏
        </Typography>
        <Typography variant="body2" color="text.secondary">
          –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
        </Typography>
      </Box>

      {/* Create Payment Form */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <AddIcon sx={{ mr: 1, color: 'primary.main' }} />
            <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
            </Typography>
            <Box sx={{ ml: 'auto' }}>
              <FormControlLabel
                control={
                  <Switch
                    checked={showForm}
                    onChange={(e) => setShowForm(e.target.checked)}
                    color="primary"
                  />
                }
                label="–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É"
              />
            </Box>
          </Box>

          {showForm && (
            students.length === 0 ? (
              <Typography color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
              </Typography>
            ) : (
              <Formik
                initialValues={{
                  student_id: 0,
                  amount: '',
                }}
                validationSchema={PaymentSchema}
                onSubmit={handleFormSubmit}
              >
                {({ isSubmitting }) => (
                  <Form>
                    <Grid container spacing={2}>
                      <Grid item xs={12}>
                        <FormControl fullWidth size="small">
                          <InputLabel>–°—Ç—É–¥–µ–Ω—Ç</InputLabel>
                          <Field
                            component={FormikSelect}
                            name="student_id"
                            label="–°—Ç—É–¥–µ–Ω—Ç"
                            formControl={{ fullWidth: true }}
                          >
                            {students.map((student) => (
                              <MenuItem key={student.id} value={student.id}>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                  <Avatar sx={{ width: 24, height: 24, bgcolor: 'primary.main' }}>
                                    <Person fontSize="small" />
                                  </Avatar>
                                  {student.first_name} {student.last_name}
                                </Box>
                              </MenuItem>
                            ))}
                          </Field>
                        </FormControl>
                      </Grid>

                      <Grid item xs={12}>
                        <Field
                          component={FormikTextField}
                          name="amount"
                          label="–°—É–º–º–∞ (‚Ç¨)"
                          type="number"
                          fullWidth
                          size="small"
                          InputProps={{
                            startAdornment: <Euro sx={{ mr: 1, color: 'text.secondary' }} />,
                          }}
                          inputProps={{ min: 0, step: 0.01 }}
                        />
                      </Grid>

                      <Grid item xs={12}>
                        <Button
                          type="submit"
                          variant="contained"
                          fullWidth
                          disabled={isSubmitting || isCreating}
                          startIcon={isCreating ? <CircularProgress size={20} /> : <PaymentIcon />}
                        >
                          {isCreating ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç—ë–∂'}
                        </Button>
                      </Grid>
                    </Grid>
                  </Form>
                )}
              </Formik>
            )
          )}
        </CardContent>
      </Card>

      {/* Filters */}
      <Box sx={{ mb: 3, display: 'flex', gap: 2, flexWrap: 'wrap' }}>
        <FormControl size="small" sx={{ minWidth: 120 }}>
          <InputLabel>–ü–µ—Ä–∏–æ–¥</InputLabel>
          <Select
            value={period}
            label="–ü–µ—Ä–∏–æ–¥"
            onChange={(e) => setPeriod(e.target.value as PeriodFilter)}
          >
            <MenuItem value="week">–ù–µ–¥–µ–ª—è</MenuItem>
            <MenuItem value="month">–ú–µ—Å—è—Ü</MenuItem>
            <MenuItem value="3months">3 –º–µ—Å—è—Ü–∞</MenuItem>
          </Select>
        </FormControl>
      </Box>

      {/* Payments History */}
      <Card>
        <CardContent>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <HistoryIcon sx={{ mr: 1, color: 'text.secondary' }} />
            <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
              –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π ({payments?.length || 0})
            </Typography>
          </Box>

          {!payments || payments.length === 0 ? (
            <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
              –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            </Typography>
          ) : (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              {payments.map((payment: any, index: number) => (
                <Box key={payment.id}>
                  <Box sx={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: 2,
                    py: 1,
                  }}>
                    <Avatar sx={{ width: 32, height: 32, bgcolor: 'success.main' }}>
                      <PaymentIcon fontSize="small" />
                    </Avatar>
                    
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2" sx={{ fontWeight: 500 }}>
                        {payment.client?.first_name} {payment.client?.last_name}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {dayjs(payment.payment_date).format('DD.MM.YYYY HH:mm')} ‚Ä¢ {payment.description}
                      </Typography>
                    </Box>

                    <Chip
                      icon={<Euro />}
                      label={`${payment.amount} ‚Ç¨`}
                      size="small"
                      color="success"
                      variant="filled"
                    />
                  </Box>
                  {index < payments.length - 1 && <Divider />}
                </Box>
              ))}
            </Box>
          )}
        </CardContent>
      </Card>
    </Box>
  );
}; 